#!/bin/sh
#
# bootstrap installs things.


info () {
  printf "\r\033  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
}

user "Willkommen: $DOTFILES" dev/null
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

success 'Starting to installing your Badass macOS terminal!!' 


setup_gitconfig() {

  info "Setting up git"
  
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'Setting up gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin"]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your git author name?'
    read -e git_authorname
    user ' - What is your git author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file() {

  local src=$1 dest=$2
  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {

  success 'Installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_gitconfig
install_dotfiles


install_Dependencies() 
{
  success "Starting to brew 🍺 your dependecies."

  if [ "$(uname -s)" == "Darwin" ]
  then
    if source bin/dot | while read -r data; do info "$data"; done
    then
      success "Installed depedencies !"
      #pip3 install --upgrade setuptools --user python
    else
      fail "error installing dependencies"
    fi
  fi
}



backupBin () {

  success "Lets backup your existing configurtion files first."
  
  if ! [ -L $HOME/bin ] && [ -d $HOME/bin ]; 
      then  # $HOME/bin not a symlink
        info "$HOME/bin is not a symlink, I create a backup ."
        sudo mv $HOME/bin bin_old && success "You can find your data here: $HOME/bin_old"
      else
        info "I could not find data to backup."
  fi
}


alex_Symlinks () {

  success "Creating symlinks between the *.rc files, and the expected ones."
  
  ln -s $HOME/.dotfiles/bin $HOME/bin && success "symlinked: $HOME/bin ~> $HOME/.dotfiles/bin !"

  #ln -s $HOME/.dotfiles/tmux $HOME/.tmux && success "symlink for $HOME/.tmux folder created"

  #if [ -d $HOME/Library/Application\ Support/Code/User ] ; then
  #  echo "Making backup of current settings.json and creating symlink..."
  #  echo ''
  #  mv $HOME/Library/Application\ Support/Code/User/settings.json $HOME/Library/Application\ Support/Code/User/settings.old.json && success "settings.old.json created"
  #  ln -s $HOME/.dotfiles/code/settings.json $HOME/Library/Application\ Support/Code/User/settings.json && success "settings.json for vs code symlink created"
  #else
  #  info "symlink for vs code settings not created"
  #  echo "VS Code does not appear to be installed or has not been launched yet. Cannot create symlink for VS Code User settings..."
  #fi

  #if ! [ -f /usr/local/bin/airport ]
  #  then
  #    sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport
  #    success "symlink for airport created"
  #  else 
  #    info "symlink for airport already exists"
  #  fi
}


alex_colors () {
  sudo gem install colorls &&  success "Settin up a color schema for your tty."
}


alex_configFix () {

   echo "Fixing .config permissions"

  if ! [ -d "$HOME/.config" ]; then
    user "$HOME/.config doesn't exist" 
  else
    sudo chown $(whoami) $HOME/.config 
    success '.config permissions fixed'
  fi
}

alex_fontSetup () {
  success 'I search a freaky font.. ' 
  cp $HOME/.dotfiles/Source\ Code\ Pro\ Nerd\ Font\ Complete.ttf /Library/Fonts
  success "You go the: SourceCodeProNerdFont font !"
}



alex_itermConfig () {

  if ! [ -f /Applications/iTerm2 ]; 
      then 
      return 0;
    else 

      success 'I see you are already using iTerm2.'
      read -p " Do you like to try my profile settings? y/n " -n 1 -r

      if [[ $REPLY =~ ^[Yy]$ ]]
      then

          defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$HOME/.itermcfg/" > success
          defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true

          if [[ $? -eq 0 ]]
          then
              success "I could set you my preferences successfully!"
          else
              fail "failed to apply my settings." 
          fi
      fi

    echo 'Please choose a theme: ' 
    options=("spaceship" "powerline10k" "powerlevel9k" "random")
    
    #for theme in "${options[@]}"
    #do
     # echo theme > dev/null
    #done
    
    select opt in "${options[@]}"
    do
        case $opt in
            "spaceship")
                export ZSH_THEME=$opt
                ;;
            "powerline10k")
                export ZSH_THEME="$opt/$opt"
                ;;
            "powerlevel9k")
                export ZSH_THEME="$opt/$opt"
                ;;
            "random")
                export ZSH_THEME="random";
                ;;
            *) fail "invalid option $REPLY";;
        esac
    done
    success 'Perfect choice !'
  fi  
}

iterm_setup() {
   
    defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$HOME/.itermcfg/"
    defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
    
      if [[ $? -eq 0 ]]
      then
          success "Successfully configured iTerm2 to use my settings!"
      else
          fail "failed to apply my settings." 
      fi
}


backupBin
alex_Symlinks
alex_colors
alex_fontSetup
#iterm_setup
alex_itermConfig
alex_configFix


read -p "Should I setup zsh as your default shell? y/n " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]] 
  then
    chsh -s /bin/zsh
    success "Perfect !"
fi


if ! [ -f /Applications/iTerm2 ]; 
  then
      success 'Badass macOS terminal installed!'
    exit 0;
  else 
    ./Applications/iTerm2
    success 'Badass macOS terminal installed!'
    exit 0;
fi
