#!/bin/sh
#
# bootstrap installs things.
source ./script/prompt

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo "''"
info 'Starting to installing your Badass macOS terminal!!'
echo "''"

setup_gitconfig() {

  echo "''"
  echo "Setting up git"
  echo "''"
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin"]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your git author name?'
    read -e git_authorname
    user ' - What is your git author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file() {
  local src=$1 dest=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  echo "''"
  info 'Installing dotfiles'
  echo "''"

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_gitconfig
install_dotfiles


# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  echo "''"
  info "installing dependencies"
  info "Dotfiles root: $DOTFILES_ROOT"
  info "pwd: $(pwd -P)"
  echo "''"

  if source bin/dot | while read -r data; do info "$data"; done
  then
    success "dependencies installed"
    echo ''
    echo "Now updating dependencies..."
    pip3 install --upgrade setuptools --user python
  else
    fail "error installing dependencies"
  fi
fi


backupBin () {
  echo "''"
  info 'Backing up existing files'
  echo "''"
  
  if [ -d $HOME/bin ]; then
    info "current $HOME/bin folder, checking for existing symlink"
    if [ ! -L $HOME/bin ]; then
      info "current $HOME/bin is not a symlink, creating backup"
      sudo mv $HOME/bin bin_old
      success "backup folder created"
    else info "$HOME/bin symlink already exists"
    fi
  else
      info "No current $HOME/bin folder found, starting symlink creation"
  fi
}


alex_Symlinks () {
  echo "''"
  info "Creating symlinks"
  echo "''"
  # symlink .dotfiles bin to ~
  ln -s $HOME/.dotfiles/bin $HOME/bin && success "symlink for $HOME/bin folder created"

  # symlink .dotfiles tmux to ~
  #ln -s $HOME/.dotfiles/tmux $HOME/.tmux && success "symlink for $HOME/.tmux folder created"

  # symlink VSCode User Settings
  #if [ -d $HOME/Library/Application\ Support/Code/User ] ; then
  #  echo "Making backup of current settings.json and creating symlink..."
  #  echo ''
  #  mv $HOME/Library/Application\ Support/Code/User/settings.json $HOME/Library/Application\ Support/Code/User/settings.old.json && success "settings.old.json created"
  #  ln -s $HOME/.dotfiles/code/settings.json $HOME/Library/Application\ Support/Code/User/settings.json && success "settings.json for vs code symlink created"
  #else
  #  info "symlink for vs code settings not created"
  #  echo "VS Code does not appear to be installed or has not been launched yet. Cannot create symlink for VS Code User settings..."
  #fi

  # airport symlink
  #if ! [ -f /usr/local/bin/airport ]
  #  then
  #    sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport
  #    success "symlink for airport created"
  #  else 
  #    info "symlink for airport already exists"
  #  fi
}


alex_colors () {
  echo "''"
  echo "Colorizing shell output."
  echo "''"
  # colorls setup
  sudo gem install colorls && success 'ls colors have been configured'
}

alex_itermConfig () {
  # iterm2 config
  read -p "Do you currently use iTerm2 and would you like to set my profile settings? y/n " -n 1 -r
  echo ''
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    # Specify the preferences directory
    defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$HOME/.itermcfg/"
    # Tell iTerm2 to use the custom preferences in the directory
    defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
      if [[ $? -eq 0 ]]
      then
          success "successfully configured iTerm2 to use jldeen's custom colors..."
      else
          fail "failed to apply jldeen's custom colors..." >&2
  fi
  else 
      info "You chose not to use iTerm2 or jldeen's custom colors."
  fi
}

alex_configFix () {
  echo "''"
  echo "Fixing .config permissions"
  echo "''"
  # .config permissions fix
  if ! [ -d "$HOME/.config" ]; then
    info "$HOME/.config doesn't exist, nothing to fix"
  else
    sudo chown $(whoami) $HOME/.config 
    success '.config permissions fixed'
  fi
}

alex_fontSetup () {
  # install Source Code Pro nerd font
  cp $HOME/.dotfiles/Source\ Code\ Pro\ Nerd\ Font\ Complete.ttf /Library/Fonts
  success "Source Code Pro font copied successfully!"
}

backupBin
alex_Symlinks
alex_colors
alex_itermConfig
alex_fontSetup
alex_configFix

# Set zsh as default shell
read -p "Do you want me to setup the zsh shell as your default shell? y/n " -n 1 -r
echo ''
if [[ $REPLY =~ ^[Yy]$ ]] 
  then
    chsh -s /bin/zsh
fi

success 'Badass macOS terminal installed!'
